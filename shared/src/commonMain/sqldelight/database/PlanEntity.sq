import kotlin.Boolean;

CREATE TABLE PlanEntity (
    id TEXT NOT NULL PRIMARY KEY,
    avatar TEXT NOT NULL,
    category TEXT NOT NULL,
    sector TEXT NOT NULL,
    type TEXT,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    duration INTEGER NOT NULL,
    estimatedSellingPrice REAL NOT NULL ,
    estimatedCostPrice REAL NOT NULL ,
    currency TEXT NOT NULL,
    fundsRaisedPercent REAL NOT NULL ,
    tasksCompletedPercent REAL NOT NULL ,
    targetAmount REAL NOT NULL,
    totalFundsRaised REAL NOT NULL ,
    analytics TEXT,
    userID TEXT NOT NULL,
    hasRequestedFund INTEGER AS Boolean NOT NULL DEFAULT 0,
    isSponsored INTEGER AS Boolean NOT NULL DEFAULT 0,
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL
);

getPlanEntities:
SELECT PlanEntity.id,
       PlanEntity.avatar,
       PlanEntity.category,
       PlanEntity.sector,
       PlanEntity.type,
       PlanEntity.name,
       PlanEntity.description,
       PlanEntity.duration,
       PlanEntity.estimatedSellingPrice,
       PlanEntity.estimatedCostPrice,
       PlanEntity.currency,
       PlanEntity.fundsRaisedPercent,
       PlanEntity.tasksCompletedPercent,
       (SELECT SUM(cost) FROM BudgetEntity WHERE BudgetEntity.planID = PlanEntity.id) AS targetAmount,
       PlanEntity.totalFundsRaised,
       PlanEntity.analytics,
       PlanEntity.userID,
       PlanEntity.hasRequestedFund,
       PlanEntity.isSponsored,
       PlanEntity.createdAt,
       PlanEntity.updatedAt,
       FundRequestEntity.*
FROM PlanEntity
LEFT JOIN FundRequestEntity
  ON PlanEntity.id = FundRequestEntity.planId
  AND FundRequestEntity.createdAt = (
      SELECT MAX(createdAt)
      FROM FundRequestEntity
      WHERE FundRequestEntity.planId = PlanEntity.id
  )
ORDER BY PlanEntity.updatedAt DESC;

getRecentPlanEntities:
SELECT PlanEntity.id,
       PlanEntity.avatar,
       PlanEntity.category,
       PlanEntity.sector,
       PlanEntity.type,
       PlanEntity.name,
       PlanEntity.description,
       PlanEntity.duration,
       PlanEntity.estimatedSellingPrice,
       PlanEntity.estimatedCostPrice,
       PlanEntity.currency,
       PlanEntity.fundsRaisedPercent,
       PlanEntity.tasksCompletedPercent,
       (SELECT SUM(cost) FROM BudgetEntity WHERE BudgetEntity.planID = PlanEntity.id) AS targetAmount,
       PlanEntity.totalFundsRaised,
       PlanEntity.analytics,
       PlanEntity.userID,
       PlanEntity.hasRequestedFund,
       PlanEntity.isSponsored,
       PlanEntity.createdAt,
       PlanEntity.updatedAt
FROM PlanEntity
ORDER BY updatedAt DESC
LIMIT :amount;

upsertPlanEntity:
INSERT OR REPLACE
INTO PlanEntity
VALUES ?;

deletePlanEntity:
DELETE FROM PlanEntity
WHERE id = :id;

getPlanEntityByID:
SELECT PlanEntity.id,
       PlanEntity.avatar,
       PlanEntity.category,
       PlanEntity.sector,
       PlanEntity.type,
       PlanEntity.name,
       PlanEntity.description,
       PlanEntity.duration,
       PlanEntity.estimatedSellingPrice,
       PlanEntity.estimatedCostPrice,
       PlanEntity.currency,
       PlanEntity.fundsRaisedPercent,
       PlanEntity.tasksCompletedPercent,
       (SELECT SUM(cost) FROM BudgetEntity WHERE BudgetEntity.planID = PlanEntity.id) AS targetAmount,
       PlanEntity.totalFundsRaised,
       PlanEntity.analytics,
       PlanEntity.userID,
       PlanEntity.hasRequestedFund,
       PlanEntity.isSponsored,
       PlanEntity.createdAt,
       PlanEntity.updatedAt,
       FundRequestEntity.*
FROM PlanEntity
LEFT JOIN FundRequestEntity
  ON PlanEntity.id = FundRequestEntity.planId
  AND FundRequestEntity.createdAt = (
      SELECT MAX(createdAt)
      FROM FundRequestEntity
      WHERE FundRequestEntity.planId = PlanEntity.id
  )
WHERE PlanEntity.id = :id;

deleteAll:
DELETE FROM PlanEntity;